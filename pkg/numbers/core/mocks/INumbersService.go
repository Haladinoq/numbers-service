// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.palo-it.net/palo/numbers-service/pkg/numbers/core/model"
)

// INumbersService is an autogenerated mock type for the INumbersService type
type INumbersService struct {
	mock.Mock
}

// GetReservationNumbers provides a mock function with given fields:
func (_m *INumbersService) GetReservationNumbers() ([]*model.NumbersDTO, error) {
	ret := _m.Called()

	var r0 []*model.NumbersDTO
	if rf, ok := ret.Get(0).(func() []*model.NumbersDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.NumbersDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveNumber provides a mock function with given fields: numbers
func (_m *INumbersService) ReserveNumber(numbers *model.NumbersDTO) error {
	ret := _m.Called(numbers)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.NumbersDTO) error); ok {
		r0 = rf(numbers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewINumbersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewINumbersService creates a new instance of INumbersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewINumbersService(t mockConstructorTestingTNewINumbersService) *INumbersService {
	mock := &INumbersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

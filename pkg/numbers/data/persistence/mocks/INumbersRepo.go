// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.palo-it.net/palo/numbers-service/pkg/numbers/data/persistence/model"
)

// INumbersRepo is an autogenerated mock type for the INumbersRepo type
type INumbersRepo struct {
	mock.Mock
}

// GetReservationsNumber provides a mock function with given fields:
func (_m *INumbersRepo) GetReservationsNumber() ([]*model.Reservation, error) {
	ret := _m.Called()

	var r0 []*model.Reservation
	if rf, ok := ret.Get(0).(func() []*model.Reservation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveNumber provides a mock function with given fields: reservation
func (_m *INumbersRepo) ReserveNumber(reservation *model.Reservation) error {
	ret := _m.Called(reservation)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Reservation) error); ok {
		r0 = rf(reservation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateReservationsNumber provides a mock function with given fields: client, number
func (_m *INumbersRepo) ValidateReservationsNumber(client string, number int64) (*model.Reservation, error) {
	ret := _m.Called(client, number)

	var r0 *model.Reservation
	if rf, ok := ret.Get(0).(func(string, int64) *model.Reservation); ok {
		r0 = rf(client, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(client, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewINumbersRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewINumbersRepo creates a new instance of INumbersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewINumbersRepo(t mockConstructorTestingTNewINumbersRepo) *INumbersRepo {
	mock := &INumbersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
